{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/global","webpack://battleship/webpack/runtime/publicPath","webpack://battleship/./src/js/attack-cycle.js","webpack://battleship/./src/js/render-ships.js","webpack://battleship/./src/js/render-grid.js","webpack://battleship/./src/js/pop-up.js","webpack://battleship/./src/test/ships/ships.js","webpack://battleship/./src/test/gameboard/gameboard.js","webpack://battleship/./src/test/generate_ship_coordinates/generate-ship-coordinates.js","webpack://battleship/./src/test/player/player.js","webpack://battleship/./src/js/start-game.js","webpack://battleship/./src/js/restart.js","webpack://battleship/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const AttackCycles = ({\n  eventE,\n  cpuGrid,\n  computersGameboard,\n  playersGameboard,\n  HelperFunction,\n}) => {\n  const CPUGRID = cpuGrid;\n  const e = eventE;\n\n  // use this pair coordinate to parse the coordinate into literal js array\n  const PAIRCOORDINATE = e.target.getAttribute('data-pair-coordinate');\n\n  // computers gameboard receives an attack by clicking the board\n  const RECEIVEATTACK = computersGameboard.ReceiveAttack({\n    coordinate: JSON.parse(PAIRCOORDINATE),\n  });\n\n  // this is distorted and should need a refactor but anyway let me explain\n  // if receive attack is object that means it's not a hit you read that right\n  const ISMISSED = typeof RECEIVEATTACK === 'object';\n\n  // helper function for assigning class for disabling element\n  const NotifWin = ({ sunk }) => (sunk ? 'player-winner' : 'not-yet');\n  const { DisableClick } = HelperFunction();\n\n  // adds a classList on the clicked element\n  e.target.classList.add(`${ISMISSED}`);\n\n  // don't allow clicks\n  CPUGRID.classList.toggle(`${DisableClick({ condition: ISMISSED })}`);\n\n  // function that is returns random attack it's not intelligent but can be enhance\n\n  const ATTACKTIME = computersGameboard.AttackPlayerSquare({\n    hitInfo: ISMISSED,\n    player: computersGameboard,\n    gameboard: playersGameboard,\n  });\n\n  // make use of timeout so that for every mistake it's cpu's turn to attack\n  let didIMiss;\n  // every cpu attack time waits 800 ms\n  setTimeout(() => {\n    // index is 0 so 0 * 800 is 0 = instant attack\n    // should make it so it's right in attacking\n    ATTACKTIME.forEach((attack, index) => {\n      setTimeout(() => {\n        const [LEFT, RIGHT] = attack.COORDINATE;\n        didIMiss = attack.ISSHIPMISSED;\n\n        const PLAYERSQAURE = document.querySelector(\n          `.first-gameboard-grid > div[data-pair-coordinate='[${LEFT}, \"${RIGHT}\"]']`,\n        );\n        PLAYERSQAURE.classList.add(`${didIMiss}`);\n\n        CPUGRID.classList.toggle(`${DisableClick({ condition: didIMiss })}`);\n        // enable player to click on the square again if cpu got missed\n      }, 800 * index);\n    });\n  }, 800);\n\n  // check if computer's ships have all been sunked\n  const ISSHIPALLSUNK = playersGameboard.IsShipAllSunk({\n    enemyGameboard: computersGameboard.SHIPS,\n  });\n\n  const WINNERNOTIF = document.querySelector('.announce-winner');\n  WINNERNOTIF.classList.toggle(`${NotifWin({ sunk: ISSHIPALLSUNK })}`);\n  CPUGRID.classList.toggle(`${DisableClick({ condition: ISSHIPALLSUNK })}`);\n\n  const DIDIWIN = computersGameboard.IsShipAllSunk({\n    enemyGameboard: playersGameboard.SHIPS,\n  });\n  WINNERNOTIF.classList.toggle(`${NotifWin({ sunk: DIDIWIN })}`);\n\n  const GetWinner = ({ opponent }) => {\n    const OPPONENT = opponent;\n\n    if (OPPONENT) {\n      return 'CPU wins 🎉';\n    }\n    return 'Player wins 🎉';\n  };\n\n  const TOPNOTIF = document.querySelector('.winner');\n  TOPNOTIF.textContent = GetWinner({ opponent: DIDIWIN });\n\n  return GetWinner({ opponent: DIDIWIN });\n};\n\nexport default AttackCycles;\n","const GetShipPlaces = ({ gameboard }) => {\n  const ARRAYSHIPPLACES = gameboard.SHIPPLACES;\n\n  const ARRAY = [];\n  for (let i = 0; i < ARRAYSHIPPLACES.length; i += 1) {\n    const { SHIP, COORDINATES } = ARRAYSHIPPLACES[i];\n\n    for (let j = 0; j < COORDINATES.length; j += 1) {\n      const COORDINATE = COORDINATES[j];\n      ARRAY.push({ SHIP, COORDINATE });\n    }\n  }\n\n  return ARRAY;\n};\n\nconst RenderShips = ({ gameboard, gameboardElement }) => {\n  const SHIPSPLACES = GetShipPlaces({ gameboard });\n\n  SHIPSPLACES.forEach(({ COORDINATE }) => {\n    const [X, Y] = COORDINATE;\n    const ELEMENT = document.querySelector(\n      `${gameboardElement} > div[data-pair-coordinate='[${X}, \"${Y}\"]']`,\n    );\n    ELEMENT.setAttribute('id', 'ships');\n  });\n};\n\nexport { RenderShips, GetShipPlaces };\n","const CreateGrid = () => {\n  const array = [];\n  let asciiOfA = 97; // -> 106 ---> a b c d e f g h i j;\n  let num = 1; // -> 10 ---> 1 2 3 4 5 6 7 8 9 10;\n\n  for (let i = 0; i < 100; i += 1) {\n    if (asciiOfA > 106) {\n      asciiOfA = 97;\n      num += 1;\n    }\n    array[i] = `[${num}, \"${String.fromCharCode(asciiOfA)}\"]`;\n    asciiOfA += 1;\n  }\n  return array;\n};\n\nconst RenderGrid = ({ parentElement }) => {\n  const parent = document.querySelector(`${parentElement}`);\n  const coordinates = CreateGrid();\n\n  return coordinates.map((element) => {\n    const div = document.createElement('div');\n    div.setAttribute('data-pair-coordinate', element);\n    parent.appendChild(div);\n    return div;\n  });\n};\n\nexport default RenderGrid;\n","const TopNotification = ({ parent }) => {\n  const div = document.createElement('div');\n  const h2 = document.createElement('h2');\n  const button = document.createElement('button');\n  const parentEl = document.querySelector(`${parent}`);\n\n  button.innerText = 'Restart';\n\n  h2.classList.add('winner');\n  button.classList.add('restart');\n  div.classList.add('announce-winner');\n  div.appendChild(h2);\n  div.appendChild(button);\n  parentEl.appendChild(div);\n\n  return { div, h2, button, parentEl };\n};\n\nexport default TopNotification;\n","const Ships = () => {\n  const SHIPS = {\n    CARRIER: { LENGTH: 5, hits: 0, sunk: false },\n    BATTLESHIP: { LENGTH: 4, hits: 0, sunk: false },\n    SUBMARINE: { LENGTH: 3, hits: 0, sunk: false },\n    CRUISE: { LENGTH: 3, hits: 0, sunk: false },\n    DESTROYER: { LENGTH: 2, hits: 0, sunk: false },\n  };\n\n  const Hit = ({ ship }) => {\n    SHIPS[ship].hits += 1;\n  };\n\n  const IsSunk = ({ ship }) => {\n    SHIPS[ship].sunk = SHIPS[ship].LENGTH === SHIPS[ship].hits;\n  };\n\n  const GetShipStatus = ({ ship }) => {\n    const { hits } = SHIPS[ship];\n    const { sunk } = SHIPS[ship];\n\n    return { hits, sunk };\n  };\n\n  return {\n    SHIPS,\n    GetShipStatus,\n    Hit,\n    IsSunk,\n  };\n};\n\nexport default Ships;\n","import Ships from '../ships/ships';\n\nconst HelperFunction = () => {\n  const Row = ({ coordinates, shipLength }) => {\n    const SHIPLEN = shipLength;\n    const [x, y] = coordinates;\n    const RESULT = [];\n    const NUMBERS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n    let matchVal = 0;\n    for (let i = 0; i < NUMBERS.length; i += 1) {\n      const NUMBER = NUMBERS[i];\n      if (NUMBER === x) {\n        matchVal = i;\n        break;\n      }\n    }\n\n    for (let j = 0; j < SHIPLEN; j += 1) {\n      RESULT[j] = [(matchVal += 1), y];\n    }\n\n    return RESULT;\n  };\n\n  const Column = ({ coordinates, shipLength }) => {\n    const SHIPLEN = shipLength;\n    const [x, y] = coordinates;\n    const RESULT = [[x, y]];\n    let asciiOfY = y.charCodeAt(0);\n\n    for (let i = 1; i < SHIPLEN; i += 1) {\n      RESULT[i] = [x, String.fromCharCode((asciiOfY += 1))];\n    }\n    return RESULT;\n  };\n\n  return {\n    Row,\n    Column,\n  };\n};\n\nconst Gameboard = () => {\n  const SHIPS = Ships();\n  const SHIPPLACES = [];\n  const MISSEDSHOTS = [];\n\n  const GetShipCoordinates = ({ pairOfCoordinates, ship, axis }) => {\n    const COORDINATE = pairOfCoordinates;\n    const SHIP = ship;\n    const AXE = axis;\n\n    const { LENGTH } = SHIPS.SHIPS[SHIP];\n    const { Row, Column } = HelperFunction();\n    if (AXE === 'vertical') {\n      return {\n        SHIP,\n        COORDINATES: Row({ coordinates: COORDINATE, shipLength: LENGTH }),\n      };\n    }\n\n    return {\n      SHIP,\n      COORDINATES: Column({ coordinates: COORDINATE, shipLength: LENGTH }),\n    };\n  };\n\n  const ReceiveAttack = ({ coordinate }) => {\n    const [X, Y] = coordinate;\n    const SHIPLOCATION = [];\n\n    for (let i = 0; i < SHIPPLACES.length; i += 1) {\n      const { SHIP, COORDINATES } = SHIPPLACES[i];\n\n      for (let j = 0; j < COORDINATES.length; j += 1) {\n        const PAIR = COORDINATES[j];\n\n        SHIPLOCATION.push({ SHIP, PAIR });\n      }\n    }\n\n    for (let j = 0; j < SHIPLOCATION.length; j += 1) {\n      const { SHIP, PAIR } = SHIPLOCATION[j];\n      const [A, B] = PAIR;\n\n      if (A === X && B === Y) {\n        SHIPS.Hit({ ship: SHIP });\n        SHIPS.IsSunk({ ship: SHIP });\n        return SHIP;\n      }\n    }\n\n    MISSEDSHOTS.push([X, Y]);\n    return [X, Y];\n  };\n\n  const IsShipAllSunk = ({ enemyGameboard }) => {\n    const ENTRY = Object.entries(enemyGameboard.SHIPS);\n    const SHIPSBOOL = [];\n\n    for (let i = 0; i < ENTRY.length; i += 1) {\n      const ELEMENT = ENTRY[i];\n\n      for (let j = 0; j < ELEMENT.length; j += 1) {\n        // sunk can change that's why it's small letter\n        const { sunk } = ELEMENT[j];\n        SHIPSBOOL[i] = sunk;\n      }\n    }\n\n    return !SHIPSBOOL.includes(false);\n  };\n\n  return {\n    SHIPS,\n    SHIPPLACES,\n    MISSEDSHOTS,\n    GetShipCoordinates,\n    ReceiveAttack,\n    IsShipAllSunk,\n  };\n};\n\nexport default Gameboard;\n","import Gameboard from '../gameboard/gameboard';\n\nconst RandomShipsPlacement = () => {\n  // same ship handler\n  const IsTheSameShip = ({ places, ship }) => {\n    const PLACES = places;\n    const SHIP = ship;\n\n    let currShip = false;\n    for (let i = 0; i < PLACES.length; i += 1) {\n      const ELEMENT = PLACES[i];\n      if (SHIP === ELEMENT.SHIP) {\n        currShip = true;\n        break;\n      }\n    }\n\n    return currShip;\n  };\n\n  // over the board handler\n  const IsOverTheBoard = ({ coordinates }) => {\n    const COORDINATES = coordinates;\n    let overTheBoard = false;\n\n    for (let i = 0; i < COORDINATES.length; i += 1) {\n      const [X, Y] = COORDINATES[i];\n\n      // previous doesn't allow 10 but now it allows until 10\n      if (X > 10) {\n        overTheBoard = true;\n        break;\n      }\n      const ASCIIOFY = Y.charCodeAt(0);\n      // previous doesn't allow 106 but now it allows until 106\n      if (ASCIIOFY > 106) {\n        overTheBoard = true;\n        break;\n      }\n    }\n    return overTheBoard;\n  };\n\n  // overlap ship handler\n  const IsOverlap = ({ coordinates, placed }) => {\n    const COORDINATES = coordinates;\n\n    let overlap = false;\n    for (let i = 0; i < COORDINATES.length; i += 1) {\n      const [x, y] = COORDINATES[i];\n\n      if (placed.has(`${x}-${y}`)) {\n        overlap = true;\n        break;\n      }\n\n      if (!placed.has(`${x}-${y}`)) {\n        placed.add(`${x}-${y}`);\n      }\n    }\n    return overlap;\n  };\n\n  const SetShipsPlaces = ({\n    places = [],\n    placed = new Set(),\n    helperFunction,\n  }) => {\n    if (places.length === 5) {\n      return places;\n    }\n    const { GetRandomShipPlacement } = helperFunction();\n    const { COORDINATE, AXIS, SHIP } = GetRandomShipPlacement();\n\n    if (IsTheSameShip({ places, ship: SHIP })) {\n      return SetShipsPlaces({ places, placed, helperFunction });\n    }\n\n    const { GetShipCoordinates } = Gameboard();\n    const SHIPCOORDINATES = GetShipCoordinates({\n      pairOfCoordinates: COORDINATE,\n      axis: AXIS,\n      ship: SHIP,\n    });\n\n    const { COORDINATES } = SHIPCOORDINATES;\n    if (IsOverTheBoard({ coordinates: COORDINATES })) {\n      return SetShipsPlaces({ places, placed, helperFunction });\n    }\n\n    if (IsOverlap({ coordinates: COORDINATES, placed })) {\n      return SetShipsPlaces({ places, placed, helperFunction });\n    }\n\n    return SetShipsPlaces({\n      places: places.concat(SHIPCOORDINATES),\n      placed,\n      helperFunction,\n    });\n  };\n\n  return { SetShipsPlaces };\n};\n\nexport default RandomShipsPlacement;\n","import Gameboard from '../gameboard/gameboard';\n\n// use the return value for adding a classList for an element\nconst HelperFunction = () => {\n  const IsHit = ({ info }) => {\n    const INFO = info;\n    return typeof INFO === 'object';\n  };\n\n  const DisableClick = ({ condition }) => {\n    const BOOL = condition;\n    if (BOOL) {\n      return 'disable-pointer';\n    }\n\n    return 'enable-pointer';\n  };\n\n  const GetRandomNumber = ({ min, max }) =>\n    Math.floor(Math.random() * (max + 1 - min) + min);\n\n  const CreateGrid = () => {\n    const ARRAY = [];\n    let asciiOfA = 97;\n    let num = 1;\n\n    for (let i = 0; i < 100; i += 1) {\n      if (asciiOfA > 106) {\n        asciiOfA = 97;\n        num += 1;\n      }\n      ARRAY[i] = [num, String.fromCharCode(asciiOfA)];\n      asciiOfA += 1;\n    }\n\n    return ARRAY;\n  };\n\n  const GetRandomShipPlacement = () => {\n    const AXE = ['vertical', 'horizontal'];\n    const SHIPS = ['CARRIER', 'BATTLESHIP', 'SUBMARINE', 'CRUISE', 'DESTROYER'];\n\n    const RANDOMNUMBER = GetRandomNumber({ min: 0, max: 99 });\n    const AXISRAND = GetRandomNumber({ min: 0, max: 1 });\n    const SHIPRAND = GetRandomNumber({ min: 0, max: 4 });\n\n    const COORDINATE = CreateGrid()[RANDOMNUMBER];\n    const AXIS = AXE[AXISRAND];\n    const SHIP = SHIPS[SHIPRAND];\n\n    return { COORDINATE, AXIS, SHIP };\n  };\n\n  const GetSeparatedCoordinate = ({ SHIPHIT = [] }) => {\n    const ARRAY = SHIPHIT;\n    const NUMBER = ARRAY.map((element) => element[0]);\n    const LETTER = ARRAY.map((element) => element[1]);\n    return { NUMBER, LETTER };\n  };\n\n  return {\n    IsHit,\n    DisableClick,\n    GetRandomNumber,\n    CreateGrid,\n    GetRandomShipPlacement,\n    GetSeparatedCoordinate,\n  };\n};\n\nconst SmartBattleshipCPU = () => {\n  const VISITED = new Set();\n  const COORDINATES = new Set();\n\n  const SetUnvisited = () => {\n    const { GetRandomNumber } = HelperFunction();\n    const x = GetRandomNumber({ min: 1, max: 10 });\n    const yAscii = GetRandomNumber({ min: 97, max: 106 });\n    const y = String.fromCharCode(yAscii);\n\n    if (!VISITED.has(`${x}-${y}`)) {\n      VISITED.add(`${x}-${y}`);\n      return [x, y];\n    }\n\n    if (VISITED.size === 100) {\n      return [x, y];\n    }\n\n    return SetUnvisited();\n  };\n\n  const SetUnvisitedAdjacentSlot = ({ array }) => {\n    const ARRAY = array;\n\n    const { GetRandomNumber } = HelperFunction();\n    const ARRAYLEN = ARRAY.length - 1;\n    const RAND = GetRandomNumber({ min: 0, max: ARRAYLEN });\n    const [X, Y] = ARRAY[RAND];\n\n    if (!VISITED.has(`${X}-${Y}`)) {\n      VISITED.add(`${X}-${Y}`);\n      return [X, Y];\n    }\n\n    const VISITEDANDUNVISITED = ARRAY.map((element) => {\n      const [A, B] = element;\n      return !VISITED.has(`${A}-${B}`);\n    });\n\n    if (!VISITEDANDUNVISITED.includes(true)) {\n      return SetUnvisited();\n    }\n\n    return SetUnvisitedAdjacentSlot({ array: ARRAY });\n  };\n\n  const GetAdjacentSlot = ({ coordinate }) => {\n    const ADJACENTSLOT = [\n      [-1, 0],\n      [0, -1],\n      [1, 0],\n      [0, 1],\n    ];\n    const [X, Y] = coordinate;\n    const ADJACENT = ADJACENTSLOT.map((element) => {\n      const [A, B] = element;\n      return [X + A, Y.charCodeAt(0) + B];\n    });\n    const FILTERADJACENT = ADJACENT.filter((element) => {\n      const [A, B] = element;\n      return A >= 1 && A <= 10 && B >= 97 && B <= 106;\n    });\n    const PROCCESSEDGOODS = FILTERADJACENT.map((element) => {\n      const [A, B] = element;\n      return [A, String.fromCharCode(B)];\n    });\n\n    return PROCCESSEDGOODS;\n  };\n\n  const GetUnvisitedAdjacencySlot = ({ array = [] }) => {\n    const ARRAY = array;\n\n    return ARRAY.filter((element) => {\n      const [X, Y] = element;\n      return !VISITED.has(`${X}-${Y}`);\n    });\n  };\n\n  const adjacentSlots = [];\n\n  const AttackPlayerSquare = ({\n    hitInfo,\n    status,\n    player,\n    gameboard,\n    array = [],\n    shipHit,\n  }) => {\n    const ISMISSED = hitInfo;\n    const STAT = status;\n\n    const ISPLAYERSHIPSSUNK = player.IsShipAllSunk({\n      enemyGameboard: gameboard.SHIPS,\n    });\n\n    // if all player ships have been sunk don't need to attack\n    if (ISPLAYERSHIPSSUNK) {\n      return array;\n    }\n\n    // if a player hit cpu ship don't attack yet\n    if (ISMISSED === false) {\n      return array;\n    }\n\n    // if this cpu missed don't attack yet\n    if (STAT === true) {\n      return array;\n    }\n\n    const { IsHit } = HelperFunction();\n\n    if (adjacentSlots.length !== 0) {\n      const COORDINATE = SetUnvisitedAdjacentSlot({ array: adjacentSlots });\n\n      const ATTACKINFO = gameboard.ReceiveAttack({\n        coordinate: COORDINATE,\n      });\n\n      // you want to know if you hit a ship or not this returns false if it's a hit otherwise true\n      const ISSHIPMISSED = IsHit({ info: ATTACKINFO });\n\n      // you want to store a strong references of adjacent slots\n      if (!ISSHIPMISSED) {\n        const ADJACENT = GetAdjacentSlot({ coordinate: COORDINATE });\n        const CLEANADJACENT = GetUnvisitedAdjacencySlot({ array: ADJACENT });\n        CLEANADJACENT.map((item) => adjacentSlots.push(item));\n      }\n\n      return array.concat(\n        { COORDINATE, ISSHIPMISSED },\n        AttackPlayerSquare({\n          hitInfo,\n          gameboard,\n          status: ISSHIPMISSED,\n          array,\n          player,\n          shipHit,\n        }),\n      );\n    }\n\n    // you want to attack player with random coordinate to pass for player to receive an attack\n    const COORDINATE = SetUnvisited();\n    const ATTACKINFO = gameboard.ReceiveAttack({\n      coordinate: COORDINATE,\n    });\n\n    // you want to know if you hit a ship or not this returns false if it's a hit otherwise true\n    const ISSHIPMISSED = IsHit({ info: ATTACKINFO });\n\n    // you want to store a strong references of adjacent slots\n    if (!ISSHIPMISSED) {\n      const ADJACENT = GetAdjacentSlot({ coordinate: COORDINATE });\n      const CLEANADJACENT = GetUnvisitedAdjacencySlot({ array: ADJACENT });\n      CLEANADJACENT.map((item) => adjacentSlots.push(item));\n    }\n\n    return array.concat(\n      { COORDINATE, ISSHIPMISSED },\n      AttackPlayerSquare({\n        hitInfo,\n        gameboard,\n        status: ISSHIPMISSED,\n        array,\n        player,\n        shipHit,\n      }),\n    );\n  };\n\n  return {\n    VISITED,\n    COORDINATES,\n    GetAdjacentSlot,\n    GetUnvisitedAdjacencySlot,\n    SetUnvisited,\n    AttackPlayerSquare,\n  };\n};\n\nconst ComputerGameboard = () => {\n  const computersGameboard = Object.assign(Gameboard(), SmartBattleshipCPU());\n  return { computersGameboard };\n};\n\nconst PlayerGameboard = () => {\n  const playersGameboard = Gameboard();\n  return { playersGameboard };\n};\n\nexport { PlayerGameboard, ComputerGameboard, HelperFunction };\n","const StartGame = function AddDialogBeforeStartingTheGame() {\n  const DIALOG = document.createElement('dialog');\n  const DIV = document.createElement('div');\n  const STARTGAME = document.createElement('div');\n  const REPOSITION = document.createElement('div');\n\n  STARTGAME.innerText = 'Start';\n  REPOSITION.innerText = 'Randomize';\n  STARTGAME.classList.add('start-dialog');\n  STARTGAME.classList.add('start-game');\n  REPOSITION.classList.add('reposition');\n\n  DIALOG.appendChild(DIV);\n  DIV.appendChild(STARTGAME);\n  DIV.appendChild(REPOSITION);\n\n  return DIALOG;\n};\n\nexport default StartGame;\n","import { RenderShips } from './render-ships';\nimport AttackCycles from './attack-cycle';\nimport RandomShipsPlacement from '../test/generate_ship_coordinates/generate-ship-coordinates';\nimport RenderGrid from './render-grid';\nimport {\n  HelperFunction,\n  PlayerGameboard,\n  ComputerGameboard,\n} from '../test/player/player';\nimport StartGame from './start-game';\n\nconst removeGrid = ({ parent, elements }) => {\n  const ELEMENTS = elements;\n\n  ELEMENTS.forEach((element) => {\n    parent.removeChild(element);\n  });\n};\n\nconst Restart = ({ firstGrid, secondGrid, firstParent, secondParent }) => {\n  const FG = document.querySelectorAll(`${firstGrid}`);\n  const FP = document.querySelector(`${firstParent}`);\n  const SG = document.querySelectorAll(`${secondGrid}`);\n  const SP = document.querySelector(`${secondParent}`);\n\n  // you want to do efficient clean up --- ayiie efficient daw\n  removeGrid({ elements: FG, parent: FP });\n  removeGrid({ elements: SG, parent: SP });\n  RenderGrid({ parentElement: firstParent });\n  RenderGrid({ parentElement: secondParent });\n\n  // randomize two ships places for every player\n  const RANDSHIPPLACES1 = RandomShipsPlacement().SetShipsPlaces({\n    places: [],\n    placed: new Set(),\n    helperFunction: HelperFunction,\n  });\n  const RANDSHIPPLACES2 = RandomShipsPlacement().SetShipsPlaces({\n    places: [],\n    placed: new Set(),\n    helperFunction: HelperFunction,\n  });\n\n  const { playersGameboard } = PlayerGameboard();\n  const { computersGameboard } = ComputerGameboard();\n\n  RANDSHIPPLACES1.forEach((element) =>\n    playersGameboard.SHIPPLACES.push(element),\n  );\n  RANDSHIPPLACES2.forEach((element) =>\n    computersGameboard.SHIPPLACES.push(element),\n  );\n\n  RenderShips({\n    gameboard: playersGameboard,\n    gameboardElement: '.first-gameboard-grid',\n  });\n\n  const HEADER = document.querySelector('header#header');\n  const PREVDIALOG = document.querySelector('dialog');\n  HEADER.removeChild(PREVDIALOG);\n\n  const DIALOG = StartGame();\n  HEADER.appendChild(DIALOG);\n  DIALOG.showModal();\n\n  const STARTGAME = document.querySelector('.start-game');\n  STARTGAME.addEventListener('click', () => {\n    DIALOG.close();\n    DIALOG.classList.toggle('hide-modal');\n  });\n\n  const REPOSITION = document.querySelector('.reposition');\n  REPOSITION.addEventListener('click', () => {\n    while (playersGameboard.SHIPPLACES.length !== 0) {\n      playersGameboard.SHIPPLACES.shift();\n    }\n    const PARENT = document.querySelector('.first-gameboard-grid');\n    const PARENTCHILDS = document.querySelectorAll(\n      '.first-gameboard-grid > div',\n    );\n\n    removeGrid({ parent: PARENT, elements: PARENTCHILDS });\n    RenderGrid({ parentElement: '.first-gameboard-grid' });\n\n    const RANDOMSHIPPLACES = RandomShipsPlacement().SetShipsPlaces({\n      places: [],\n      placed: new Set(),\n      helperFunction: HelperFunction,\n    });\n    RANDOMSHIPPLACES.forEach((element) => {\n      playersGameboard.SHIPPLACES.push(element);\n    });\n\n    RenderShips({\n      gameboard: playersGameboard,\n      gameboardElement: '.first-gameboard-grid',\n    });\n  });\n\n  // starting a new game means starting to listen to newly made grid elements for a clicks\n  const CPUGRID = document.querySelector('.second-gameboard-grid');\n  CPUGRID.classList.toggle('disable-pointer');\n  const CPUSQUARES = document.querySelectorAll('.second-gameboard-grid > div');\n\n  CPUSQUARES.forEach((square) => {\n    square.addEventListener(\n      'click',\n      (eventE) => {\n        AttackCycles({\n          eventE,\n          cpuGrid: CPUGRID,\n          computersGameboard,\n          playersGameboard,\n          HelperFunction,\n        });\n      },\n      { once: true },\n    );\n  });\n};\n\nexport { Restart, removeGrid };\n","import './css/style.css';\nimport AttackCycles from './js/attack-cycle';\nimport { RenderShips } from './js/render-ships';\nimport RenderGrid from './js/render-grid';\nimport TopNotification from './js/pop-up';\nimport { Restart, removeGrid } from './js/restart';\nimport RandomShipsPlacement from './test/generate_ship_coordinates/generate-ship-coordinates';\nimport {\n  HelperFunction,\n  ComputerGameboard,\n  PlayerGameboard,\n} from './test/player/player';\nimport StartGame from './js/start-game';\nimport Icon from './img/battleship-logo.svg';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const HEADER = document.querySelector('header');\n  HEADER.setAttribute('id', 'header');\n  const LOGO = new Image();\n  LOGO.src = Icon;\n  HEADER.appendChild(LOGO);\n\n  const YEARDATE = document.querySelector('.year-date');\n  YEARDATE.textContent = `${new Date().getFullYear()}`;\n\n  // basic ui for starting game\n  const STARTDIALOG = StartGame();\n  HEADER.appendChild(STARTDIALOG);\n\n  const STARTGAME = document.querySelector('.start-game');\n  STARTDIALOG.showModal();\n\n  // close modal on start\n  STARTGAME.addEventListener('click', () => {\n    STARTDIALOG.close();\n    STARTDIALOG.classList.toggle('hide-modal');\n  });\n\n  // initialize grid elements on parent elements with preset coordiantes\n  RenderGrid({\n    parentElement: '.first-gameboard-grid',\n  });\n  RenderGrid({\n    parentElement: '.second-gameboard-grid',\n  });\n\n  const RANDSHIPPLACE1 = RandomShipsPlacement().SetShipsPlaces({\n    places: [],\n    placed: new Set(),\n    helperFunction: HelperFunction,\n  });\n  const RANDSHIPPLACE2 = RandomShipsPlacement().SetShipsPlaces({\n    places: [],\n    placed: new Set(),\n    helperFunction: HelperFunction,\n  });\n\n  const { playersGameboard } = PlayerGameboard();\n  const { computersGameboard } = ComputerGameboard();\n\n  RANDSHIPPLACE1.forEach((element) =>\n    playersGameboard.SHIPPLACES.push(element),\n  );\n  RANDSHIPPLACE2.forEach((element) =>\n    computersGameboard.SHIPPLACES.push(element),\n  );\n\n  const REPOSITION = document.querySelector('.reposition');\n  REPOSITION.addEventListener('click', () => {\n    while (playersGameboard.SHIPPLACES.length !== 0) {\n      playersGameboard.SHIPPLACES.shift();\n    }\n    const PARENT = document.querySelector('.first-gameboard-grid');\n    const PARENTCHILDS = document.querySelectorAll(\n      '.first-gameboard-grid > div',\n    );\n\n    removeGrid({ parent: PARENT, elements: PARENTCHILDS });\n    RenderGrid({ parentElement: '.first-gameboard-grid' });\n\n    const RANDOMSHIPPLACES = RandomShipsPlacement().SetShipsPlaces({\n      places: [],\n      placed: new Set(),\n      helperFunction: HelperFunction,\n    });\n    RANDOMSHIPPLACES.forEach((element) => {\n      playersGameboard.SHIPPLACES.push(element);\n    });\n\n    RenderShips({\n      gameboard: playersGameboard,\n      gameboardElement: '.first-gameboard-grid',\n    });\n  });\n\n  RenderShips({\n    gameboard: playersGameboard,\n    gameboardElement: '.first-gameboard-grid',\n  });\n\n  TopNotification({ parent: 'header#header' }).button.addEventListener(\n    'click',\n    () =>\n      Restart({\n        firstParent: '.first-gameboard-grid',\n        secondParent: '.second-gameboard-grid',\n        firstGrid: '.first-gameboard-grid > div',\n        secondGrid: '.second-gameboard-grid > div',\n      }),\n  );\n\n  const WINNER = document.querySelector('.announce-winner');\n  const RESTART = document.querySelector('.restart');\n  RESTART.addEventListener('click', () => {\n    WINNER.classList.remove('player-winner');\n    WINNER.classList.remove('not-yet');\n  });\n\n  const CPUGRID = document.querySelector('.second-gameboard-grid');\n  const CPUSQUARES = document.querySelectorAll('.second-gameboard-grid > div');\n\n  CPUSQUARES.forEach((square) => {\n    square.addEventListener(\n      'click',\n      (eventE) => {\n        AttackCycles({\n          eventE,\n          cpuGrid: CPUGRID,\n          computersGameboard,\n          playersGameboard,\n          HelperFunction,\n        });\n      },\n      { once: true },\n    );\n  });\n});\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","eventE","cpuGrid","computersGameboard","playersGameboard","HelperFunction","CPUGRID","PAIRCOORDINATE","target","getAttribute","ISMISSED","ReceiveAttack","coordinate","JSON","parse","NotifWin","sunk","DisableClick","classList","add","toggle","condition","ATTACKTIME","AttackPlayerSquare","hitInfo","player","gameboard","didIMiss","setTimeout","forEach","attack","index","LEFT","RIGHT","COORDINATE","ISSHIPMISSED","querySelector","ISSHIPALLSUNK","IsShipAllSunk","enemyGameboard","SHIPS","WINNERNOTIF","DIDIWIN","GetWinner","opponent","textContent","RenderShips","gameboardElement","SHIPSPLACES","ARRAYSHIPPLACES","SHIPPLACES","ARRAY","SHIP","COORDINATES","j","push","GetShipPlaces","X","Y","setAttribute","parentElement","parent","array","asciiOfA","num","String","fromCharCode","CreateGrid","map","element","div","createElement","appendChild","h2","button","parentEl","innerText","CARRIER","LENGTH","hits","BATTLESHIP","SUBMARINE","CRUISE","DESTROYER","GetShipStatus","ship","Hit","IsSunk","MISSEDSHOTS","GetShipCoordinates","pairOfCoordinates","axis","AXE","Row","Column","coordinates","shipLength","SHIPLEN","x","y","RESULT","NUMBERS","matchVal","asciiOfY","charCodeAt","SHIPLOCATION","PAIR","A","B","ENTRY","Object","entries","SHIPSBOOL","ELEMENT","includes","SetShipsPlaces","places","placed","Set","helperFunction","GetRandomShipPlacement","AXIS","PLACES","currShip","IsTheSameShip","SHIPCOORDINATES","overTheBoard","IsOverTheBoard","overlap","has","IsOverlap","concat","GetRandomNumber","min","max","Math","floor","random","IsHit","info","RANDOMNUMBER","AXISRAND","SHIPRAND","GetSeparatedCoordinate","SHIPHIT","NUMBER","LETTER","ComputerGameboard","assign","VISITED","SetUnvisited","yAscii","size","SetUnvisitedAdjacentSlot","RAND","GetAdjacentSlot","filter","GetUnvisitedAdjacencySlot","adjacentSlots","status","shipHit","STAT","ADJACENT","item","SmartBattleshipCPU","PlayerGameboard","DIALOG","DIV","STARTGAME","REPOSITION","removeGrid","elements","removeChild","addEventListener","HEADER","LOGO","Image","Date","getFullYear","STARTDIALOG","showModal","close","RANDSHIPPLACE1","RANDSHIPPLACE2","shift","PARENT","PARENTCHILDS","querySelectorAll","firstGrid","secondGrid","firstParent","secondParent","FG","FP","SG","SP","RANDSHIPPLACES1","RANDSHIPPLACES2","PREVDIALOG","square","once","Restart","WINNER","remove"],"sourceRoot":""}